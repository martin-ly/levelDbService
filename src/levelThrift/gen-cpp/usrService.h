/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef usrService_H
#define usrService_H

#include <thrift/TDispatchProcessor.h>
#include "kvsys_types.h"



class usrServiceIf {
 public:
  virtual ~usrServiceIf() {}
  virtual void getUsr(std::string& _return, const int32_t uid) = 0;
  virtual int32_t getUid(const std::string& usr) = 0;
};

class usrServiceIfFactory {
 public:
  typedef usrServiceIf Handler;

  virtual ~usrServiceIfFactory() {}

  virtual usrServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(usrServiceIf* /* handler */) = 0;
};

class usrServiceIfSingletonFactory : virtual public usrServiceIfFactory {
 public:
  usrServiceIfSingletonFactory(const boost::shared_ptr<usrServiceIf>& iface) : iface_(iface) {}
  virtual ~usrServiceIfSingletonFactory() {}

  virtual usrServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(usrServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<usrServiceIf> iface_;
};

class usrServiceNull : virtual public usrServiceIf {
 public:
  virtual ~usrServiceNull() {}
  void getUsr(std::string& /* _return */, const int32_t /* uid */) {
    return;
  }
  int32_t getUid(const std::string& /* usr */) {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _usrService_getUsr_args__isset {
  _usrService_getUsr_args__isset() : uid(false) {}
  bool uid;
} _usrService_getUsr_args__isset;

class usrService_getUsr_args {
 public:

  usrService_getUsr_args() : uid(0) {
  }

  virtual ~usrService_getUsr_args() throw() {}

  int32_t uid;

  _usrService_getUsr_args__isset __isset;

  void __set_uid(const int32_t val) {
    uid = val;
  }

  bool operator == (const usrService_getUsr_args & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    return true;
  }
  bool operator != (const usrService_getUsr_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const usrService_getUsr_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class usrService_getUsr_pargs {
 public:


  virtual ~usrService_getUsr_pargs() throw() {}

  const int32_t* uid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _usrService_getUsr_result__isset {
  _usrService_getUsr_result__isset() : success(false) {}
  bool success;
} _usrService_getUsr_result__isset;

class usrService_getUsr_result {
 public:

  usrService_getUsr_result() : success() {
  }

  virtual ~usrService_getUsr_result() throw() {}

  std::string success;

  _usrService_getUsr_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const usrService_getUsr_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const usrService_getUsr_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const usrService_getUsr_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _usrService_getUsr_presult__isset {
  _usrService_getUsr_presult__isset() : success(false) {}
  bool success;
} _usrService_getUsr_presult__isset;

class usrService_getUsr_presult {
 public:


  virtual ~usrService_getUsr_presult() throw() {}

  std::string* success;

  _usrService_getUsr_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _usrService_getUid_args__isset {
  _usrService_getUid_args__isset() : usr(false) {}
  bool usr;
} _usrService_getUid_args__isset;

class usrService_getUid_args {
 public:

  usrService_getUid_args() : usr() {
  }

  virtual ~usrService_getUid_args() throw() {}

  std::string usr;

  _usrService_getUid_args__isset __isset;

  void __set_usr(const std::string& val) {
    usr = val;
  }

  bool operator == (const usrService_getUid_args & rhs) const
  {
    if (!(usr == rhs.usr))
      return false;
    return true;
  }
  bool operator != (const usrService_getUid_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const usrService_getUid_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class usrService_getUid_pargs {
 public:


  virtual ~usrService_getUid_pargs() throw() {}

  const std::string* usr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _usrService_getUid_result__isset {
  _usrService_getUid_result__isset() : success(false) {}
  bool success;
} _usrService_getUid_result__isset;

class usrService_getUid_result {
 public:

  usrService_getUid_result() : success(0) {
  }

  virtual ~usrService_getUid_result() throw() {}

  int32_t success;

  _usrService_getUid_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const usrService_getUid_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const usrService_getUid_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const usrService_getUid_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _usrService_getUid_presult__isset {
  _usrService_getUid_presult__isset() : success(false) {}
  bool success;
} _usrService_getUid_presult__isset;

class usrService_getUid_presult {
 public:


  virtual ~usrService_getUid_presult() throw() {}

  int32_t* success;

  _usrService_getUid_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class usrServiceClient : virtual public usrServiceIf {
 public:
  usrServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  usrServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getUsr(std::string& _return, const int32_t uid);
  void send_getUsr(const int32_t uid);
  void recv_getUsr(std::string& _return);
  int32_t getUid(const std::string& usr);
  void send_getUid(const std::string& usr);
  int32_t recv_getUid();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class usrServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<usrServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (usrServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getUsr(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getUid(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  usrServiceProcessor(boost::shared_ptr<usrServiceIf> iface) :
    iface_(iface) {
    processMap_["getUsr"] = &usrServiceProcessor::process_getUsr;
    processMap_["getUid"] = &usrServiceProcessor::process_getUid;
  }

  virtual ~usrServiceProcessor() {}
};

class usrServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  usrServiceProcessorFactory(const ::boost::shared_ptr< usrServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< usrServiceIfFactory > handlerFactory_;
};

class usrServiceMultiface : virtual public usrServiceIf {
 public:
  usrServiceMultiface(std::vector<boost::shared_ptr<usrServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~usrServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<usrServiceIf> > ifaces_;
  usrServiceMultiface() {}
  void add(boost::shared_ptr<usrServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getUsr(std::string& _return, const int32_t uid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getUsr(_return, uid);
    }
    ifaces_[i]->getUsr(_return, uid);
    return;
  }

  int32_t getUid(const std::string& usr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getUid(usr);
    }
    return ifaces_[i]->getUid(usr);
  }

};



#endif
